language en_US

packadd! dracula

syntax on

if has('python3')
  silent! python3 1
endif

let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" true color
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

" italics
let &t_ZH = "\<Esc>[3m"
let &t_ZR = "\<Esc>[23m"

set encoding=utf-8
set fileencoding=utf-8

set ttimeoutlen=10

set belloff=all
set breakindent
set breakindentopt=shift:4
set cursorline
set fillchars=vert:│,fold:-
set formatoptions=tcqr
set incsearch
set lazyredraw
set maxmempattern=5000
set nocompatible
set noshowmode
set noswapfile
set number
set relativenumber
set scrolloff=9999
set shiftwidth=4
set showcmd
set smartindent
set tabstop=4
set updatetime=100
set wildmenu
set wildmode=list
setlocal cm=blowfish2

" ignore swap warnings
set shortmess+=A

" when searching
set smartcase
set ignorecase

" allow for deleting existing file content
set backspace=indent,eol,start

" more natural splits
set splitbelow
set splitright

if &term =~ '^screen'
	set ttymouse=xterm2
endif

filetype on

au BufRead,BufNewFile *.rkt set lisp
au BufRead,BufNewFile *.fig setfiletype pug
au BufRead,BufNewFile *.tex setfiletype tex

" vim-commentary
au FileType javascript,typescript setlocal commentstring=//\ %s
au Filetype typescript setlocal commentstring=//\ %s
au Filetype sass setlocal commentstring=//\ %s
au FileType vim setlocal commentstring=\"\ %s
au FileType pug setlocal commentstring=//-\ %s

au FileType markdown,haskell let b:sleuth_automatic=0

function! HaskellIndent ()
	set shiftwidth=2
	set tabstop=2
	set expandtab
endfunction

au FileType haskell :call HaskellIndent()

set nofoldenable
set foldmethod=indent
au BufWinLeave ?* mkview 1

let g:mapleader = ","

" make option/alt binds work
" execute "set <A-h>=\eh"
" execute "set <A-j>=\ej"
" execute "set <A-k>=\ek"
" execute "set <A-l>=\el"

imap <A-j> <ESC><Plug>MoveLineDowni
imap <A-k> <ESC><Plug>MoveLineUpi

nnoremap <silent> <c-w>\| :Vexplore!<cr>
nnoremap <silent> <c-w>- :Sex<cr>
nnoremap <silent> <c-w>_ :Sex<cr>
nnoremap <silent> <c-h> <c-w>h
nnoremap <silent> <c-j> <c-w>j
nnoremap <silent> <c-k> <c-w>k
nnoremap <silent> <c-l> <c-w>l

nnoremap <silent> <Leader>a :call AckSearch('')<Left><Left>
nnoremap <silent> <Leader>d :call completor#do('doc')<CR>

" fzf.vim files search
nnoremap <silent> <Leader>f :Files<CR>

nnoremap <silent> <Leader>m :set mouse=a<CR>
nnoremap <silent> <Leader>n :set mouse=<CR>
nnoremap <silent> <Leader>p :set invpaste<CR>
nnoremap <silent> <Leader>q :cclose<CR>
nnoremap <silent> <Leader>s :UltiSnipsEdit<CR>
nnoremap <silent> <Leader>v :source ~/.vim/vimrc<CR>

" fzf.vim buffer search window
nnoremap <silent> <space> :Buffers<CR>

nmap <silent> [s <Plug>(ale_previous_wrap)
nmap <silent> ]s <Plug>(ale_next_wrap)

" select last changed (e.g. pasted) text
nnoremap gp `[v`]

set laststatus=2

if ! has('gui_running')
	set ttimeoutlen=10
	augroup FastEscape
		autocmd!
		au InsertEnter * set timeoutlen=0
		au InsertLeave * set timeoutlen=1000
	augroup END
endif

let g:lightline = {
\  'colorscheme': 'deus',
\  'inactive': {
\    'left': [[], ['file', 'modified']],
\    'right': []
\  },
\  'active': {
\    'left': [['mode', 'paste'], ['file', 'modified']],
\    'right': [['lineinfo'], ['percent'], ['readonly', 'linter_checking', 'linter_warnings', 'linter_errors', 'linter_ok']]
\  },
\  'tabline': {
\  'left': [ [ 'tabs' ] ],
\  'right': [ [ 'close' ] ]
\  },
\  'component': {
\    'file': '%{expand("%")}'
\  },
\  'component_expand': {
\    'linter_checking': 'lightline#ale#checking',
\    'linter_warnings': 'lightline#ale#warnings',
\    'linter_errors': 'lightline#ale#errors',
\    'linter_ok': 'lightline#ale#ok'
\  },
\  'component_type': {
\    'readonly': 'error',
\    'linter_warnings': 'warning',
\    'linter_errors': 'error'
\  }
\}

let g:lightline#ale#indicator_checking = '↻ '
let g:lightline#ale#indicator_errors = '✖ '
let g:lightline#ale#indicator_warnings = '▲ '
let g:lightline#ale#indicator_ok = '✓ '

" disable ale in ~
let g:ale_enabled = getcwd() !=? expand('~')

" \  'typescript': ['xo', 'tsserver'],
let g:ale_linters = {
\  'javascript': ['xo'],
\  'vue': ['xo'],
\  'markdown': []
\}

"\  'typescript': 'javascript'
let g:ale_linter_aliases = {
\  'vue': 'javascript',
\}

let g:ale_pattern_options = {
\  '\/Users\/nikersify\/[^/]*\.js': {'ale_enabled': 0}
\}

let g:ale_javascript_xo_options = '--extend ~/.xo.js'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_list_window_size = 8
let g:ale_open_list = 1
let g:ale_set_quickfix = 1
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '▲'

let delimitMate_expand_cr = 1
au FileType vim,html let b:delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_jump_expansion = 1

let g:completor_completion_delay = 0
au BufRead,BufNewFile *.md let g:completor_auto_trigger = 0
imap <expr> <CR> pumvisible() ? "<C-Y>\<Plug>delimitMateCR" : "\<Plug>delimitMateCR"

let g:vim_markdown_new_list_item_indent = 0

let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsEditSplit="horizontal"
" disable autotrigger for better typing performance
au VimEnter * au! UltiSnips_AutoTrigger

let g:closetag_filenames = "*.html,*.tag,*.js,*.jsx,*.tsx"

let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_modified_removed = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_removed_first_line = '∙'

let g:polyglot_disabled = ['vue', 'haskell']
let g:vue_disable_pre_processors = 1

let g:indexed_search_colors = 0
let g:indexed_search_numbered_only = 1

" Bash version
"let g:gh_open_command = 'fn() { echo "$@" | pbcopy; }; fn '

" Fish version
let g:gh_open_command = 'function fn; echo "$argv" | pbcopy; end; fn '

" vim-js-pretty-template
au FileType javascript :call jspretmpl#register_tag('sql', 'sql')
" au FileType javascript :call jspretmpl#register_tag('pug', 'pug')
au FileType javascript JsPreTmpl

let g:sql_type_default = 'pgsql'

au BufRead,BufNewFile sass Sleuth

if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

colorscheme dracula
let g:dracula_colorterm = 0

function! AckSearch(string) abort
	let saved_shellpipe = &shellpipe
	let &shellpipe = '>'

	try
		execute 'Ack!' shellescape(a:string, 1)
	finally
		let &shellpipe = saved_shellpipe
	endtry

endfunction

function! TrailingWhitespace ()
	hi clear MatchParen
	hi MatchParen cterm=bold,underline term=bold,underline

	hi ExtraWhitespace cterm=underline,bold gui=underline,bold ctermfg=red guifg=#ee0000
	match ExtraWhitespace /\s\+$/
endfunction

au BufWinEnter * :call TrailingWhitespace()

" close vim if quickfix is the only buffer left
augroup QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
augroup END

call TrailingWhitespace()

hi Error ctermfg=red ctermbg=none guifg=#ff0000 guibg=NONE cterm=underline
hi Warn cterm=none ctermfg=215 ctermbg=none
hi VertSplit cterm=none ctermfg=59 ctermbg=none
hi EndOfBuffer ctermfg=59

syn keyword cTodo TODO
hi link cTodo Todo
hi link ALEWarningSign Warn
hi link ALEErrorSign Error

au BufEnter * set colorcolumn=80
set colorcolumn=80
